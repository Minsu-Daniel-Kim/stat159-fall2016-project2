<<<<<<< HEAD
index <- createDataPartition(y = credit$Balance, p = 0.8, list = FALSE)
credit.train <- credit[index, ]
credit.test <- credit[-index, ]
# sanity check
credit.test %>% nrow()
# 10-fold cross validation
# train the model
train_control<- trainControl(method="cv", number=10)
credit.train %>% nrow()
model.lm <- train(Balance~., data=credit, trControl=train_control, method="lm")
model.lm
SST <- function(y, y_mean) {
sum((y - y_mean) ^ 2)
}
y = c(1,2,3)
y_mean = mean(y)
y = c(1,2,3)
y_mean = mean(y)
sst <- SST(y, y_mean)
sst
y_mean
y - y_mean
(y - y_mean) ^^ 2
(y - y_mean) ^ 2
sum((y - y_mean) ^ 2)
library(testthat)
library(testthat)
source("code/functions/evaluation.R")
context("Test for ols regression")
test_that("Sum of Squared Total", {
y = c(1,2,3)
y_mean = mean(y)
expect_equal(SST(y, y_mean), 2)
})
test_that("Sum of Squared Total", {
y = c(1,2,3)
y_mean = mean(y)
expect_equal(SST(y, y_mean), 2)
})
test_that("Sum of Squared Total", {
y = c(1,2,3, 4)
y_mean = mean(y)
expect_equal(SST(y, y_mean), 2)
})
library(testthat)
source("code/functions/evaluation.R")
context("Test for ols regression")
test_that("Sum of Squared Total", {
y = c(1,2,3)
y_mean = mean(y)
expect_equal(SST(y, y_mean), 2)
})
test_that("regression sum of squares", {
y = c(1,2,3)
y_mean = mean(y)
expect_equal(SSR(y, y_mean), 2)
})
library(testthat)
source("code/functions/evaluation.R")
test_that("regression sum of squares", {
y = c(1,2,3)
y_mean = mean(y)
expect_equal(SSR(y, y_mean), 2)
})
y <- c(1,2,3)
y_estimate <- c(1, 2, 3)
test_that("r-squared", {
y <- c(1,2,3)
y_estimate <- c(1, 2, 3)
expect_equal(rsquared(y, y_estimate), 1)
})
y <- c(1,2,3)
y_estimate <- c(1, 2, 3)
expect_equal(rsquared(y, y_estimate), 1)
rsquared <- function(y, y_estimated) {
y_mean = mean(y)
sst <- SST(y, y_mean)
ssr <- SSR(y, y_estimated)
return(ssr/sst)
}
y <- c(1,2,3)
y_estimate <- c(1, 2, 3)
expect_equal(rsquared(y, y_estimate), 1)
library(testthat)
source("code/functions/evaluation.R")
test_that("r-squared", {
y <- c(1,2,3)
y_estimate <- c(1, 2, 3)
expect_equal(rsquared(y, y_estimate), 1)
})
rsquared <- function(y, y_estimated) {
y_mean = mean(y)
sst <- SST(y, y_mean)
ssr <- SSR(y_estimated, y_mean)
return(ssr/sst)
}
test_that("r-squared", {
y <- c(1,2,3)
y_estimate <- c(1, 2, 3)
expect_equal(rsquared(y, y_estimate), 1)
})
source("code/functions/evaluation.R")
source("code/functions/evaluation.R")
model.summary <- summary(model.lm)
model.summary
model.lm
model.lm$results
model.lm$pred
model.lm.pred <- predict(model.lm, credi.test)
model.lm.pred <- predict(model.lm, credit.test)
model.lm <- train(Balance~., data=credit, trControl=train_control, method="lm")
model.lm.pred <- predict(model.lm, credit.test)
model.lm.summary <- summary(model.lm)
model.lm.pred
rsquared(credit.test$Balance, model.lm.pred)
library(caret)
library(dplyr)
source("code/functions/evaluation.R")
# import preprocessed credit file
credit <- read.csv("data/scaled-credit.csv")
# split data set into 80% (training & validation) / 20% (testing)
set.seed(1000)
index <- createDataPartition(y = credit$Balance, p = 0.8, list = FALSE)
credit.train <- credit[index, ]
credit.test <- credit[-index, ]
# sanity check
credit.test %>% nrow()
credit.train %>% nrow()
# 10-fold cross validation
train_control<- trainControl(method="cv", number=10)
# train the model
model.lm <- train(Balance~., data=credit.train, trControl=train_control, method="lm")
model.lm.pred <- predict(model.lm, credit.test)
model.lm.summary <- summary(model.lm)
rsquared(credit.test$Balance, model.lm.pred)
model.lm <- train(Balance~., data=credit.train, trControl=train_control, method="lm")
model.lm
model.lm.pred <- predict(model.lm, credit.test)
model.lm.summary <- summary(model.lm)
rsquared(credit.test$Balance, model.lm.pred)
rsquared <- function(y, y_estimated) {
y_mean = mean(y)
sst <- SST(y, y_mean)
ssr <- SSR(y_estimated, y_mean)
return(ssr/sst)
}
# train the model
model.lm <- train(Balance~., data=credit.train, trControl=train_control, method="lm")
model.lm.pred <- predict(model.lm, credit.test)
model.lm.summary <- summary(model.lm)
rsquared(credit.test$Balance, model.lm.pred)
model.lm.summary
model.lm
model.lm$results
model.lm.summary
model.lm
model.lm.pred <- predict(model.lm, credit.test)
model.lm.pred
model.lm.pred
predict
model.lm.pred
model.lm.summary
model.lm$results
model.lm$results
plot(model.lm$results)
train_control
model.lm <- train(Balance~., data=credit.train, trControl=train_control, method="ridge")
model.lm
?lm
model.lm <- train(Balance~., data=credit.train, trControl=train_control, method="ridge")
model.lm.pred <- predict(model.lm, credit.test)
model.lm.pred
model.lm
model.lm$results
model.lm <- train(Balance~., data=credit.train, trControl=train_control, method="lm")
model.lm.pred <- predict(model.lm, credit.test)
model.lm.summary <- summary(model.lm)
model.lm$results
model.ridge <- train(Balance~., data=credit.train, trControl=train_control, method="ridge")
model.ridge$results
library(caret)
library(dplyr)
source("code/functions/evaluation.R")
# import preprocessed credit file
credit <- read.csv("data/scaled-credit.csv")
# split data set into 80% (training & validation) / 20% (testing)
index <- createDataPartition(y = credit$Balance, p = 0.8, list = FALSE)
set.seed(1000)
credit.train <- credit[index, ]
credit.test <- credit[-index, ]
# sanity check
credit.test %>% nrow()
credit.train %>% nrow()
# 10-fold cross validation
train_control<- trainControl(method="cv", number=10)
library(caret)
library(dplyr)
source("code/functions/evaluation.R")
# import preprocessed credit file
credit <- read.csv("data/scaled-credit.csv")
# split data set into 80% (training & validation) / 20% (testing)
set.seed(1000)
index <- createDataPartition(y = credit$Balance, p = 0.8, list = FALSE)
credit.train <- credit[index, ]
credit.test <- credit[-index, ]
# sanity check
credit.test %>% nrow()
credit.train %>% nrow()
# 10-fold cross validation
train_control<- trainControl(method="cv", number=10)
# train the model
model.lasso <- train(Balance~., data=credit.train, trControl=train_control, method="lasso")
model.lasso$results
credit.test %>% nrow()
credit.train %>% nrow()
?glmnet
glmnet
install.packages("glmnet")
library(glmnet)
?glmnet()
select(credit.train, -Balance)
head(select(credit.train, -Balance))
glmnet(select(credit.train, -Balance), credit.train$Balance, alpha = 0)
glmnet(select(credit.train, -Balance), credit.train$Balance, alpha = 0)
summary(credit.train)
str(credit.train)
str(credit.train)
glmnet(select(credit.train, -Balance), credit.train$Balance, alpha = 0)
glmnet(as.matrix(select(credit.train, -Balance)), credit.train$Balance, alpha = 0)
?cv.glmnet()
grid <- 10 ^ seq(10, -2, length = 100)
grid
grid
cv.glmnet(as.matrix(select(credit.train, -Balance)), credit.train$Balance, nfolds = 10, intercept = FALSE, standardize = FALSE, lambda = grid)
model.ridge.cv <- cv.glmnet(as.matrix(select(credit.train, -Balance)), credit.train$Balance, nfolds = 10, intercept = FALSE, standardize = FALSE, lambda = grid)
model.ridge.cv
model.ridge.cv
model.ridge.cv$lambda.min
glmnet(as.matrix(select(credit.train, -Balance)), credit.train$Balance, alpha = 0, lambda = model.ridge.cv$lambda.min)
model.ridge2 <- glmnet(as.matrix(select(credit.train, -Balance)), credit.train$Balance, alpha = 0, lambda = model.ridge.cv$lambda.min)
model.ridge2
predict(model.ridge2, credit.test)
plot(model.ridge.cv)
as.matrix(select(credit.train, -Balance))
as.matrix(select(credit.train, -Balance))
model.ridge.lambda <- cv.glmnet(as.matrix(select(credit.train, -Balance)), credit.train$Balance, nfolds = 10, intercept = FALSE, standardize = FALSE, lambda = grid)
plot(model.ridge.lambda)
predLasso<-predict(model.ridge.lambda, as.matrix(select(credit.test, -Balance)) ,s="lambda.min")
predLasso
model.ridge.model <- glmnet(as.matrix(select(credit.train, -Balance)), credit.train$Balance, alpha = 0, lambda = model.ridge.lambda$lambda.min)
model.ridge.model
grid <- 10 ^ seq(10, -2, length = 100)
model.ridge.lambda <- cv.glmnet(as.matrix(select(credit.train, -Balance)), credit.train$Balance, nfolds = 10, intercept = FALSE, standardize = FALSE, lambda = grid)
model.ridge.model2 <- glmnet(as.matrix(select(credit.train, -Balance)), credit.train$Balance, alpha = 0, lambda = model.ridge.lambda$lambda.min)
predict(model.ridge.model2,newx= as.matrix(select(credit.test, -Balance)),type="response",s=0.01)
model.ridge.lambda
model.ridge.lambda$lambda.min
predict(model.ridge2, credit.test, s= model.ridge.lambda$lambda.min)
model.ridge.lambda$lambda.min
model.ridge.lambda$lambda.min
predict(model.ridge2, as.matrix(select(credit.test, -Balance)), s= model.ridge.lambda$lambda.min)
predict(model.ridge2, as.matrix(select(credit.test, -Balance)), s= model.ridge.lambda$lambda.min) %>% nrow()
rsquared(credit.test$Balance, predict(model.ridge2, as.matrix(select(credit.test, -Balance)), s= model.ridge.lambda$lambda.min) %>% nrow())
nrow(credit.test$Balance)
credit.test$Balance
rsquared(credit.test$Balance, predict(model.ridge.model2, as.matrix(select(credit.test, -Balance)), s= model.ridge.lambda$lambda.min) %>% nrow())
library(caret)
library(dplyr)
library(glmnet)
source("code/functions/evaluation.R")
credit <- read.csv("data/scaled-credit.csv")
# import preprocessed credit file
# split data set into 80% (training & validation) / 20% (testing)
set.seed(1000)
index <- createDataPartition(y = credit$Balance, p = 0.8, list = FALSE)
credit.train <- credit[index, ]
credit.test <- credit[-index, ]
# sanity check
credit.test %>% nrow()
credit.train %>% nrow()
# 10-fold cross validation
train_control<- trainControl(method="cv", number=10)
# train the model
model.ridge <- train(Balance~., data=credit.train, trControl=train_control, method="ridge")
model.ridge$results
set.seed(1000)
grid <- 10 ^ seq(10, -2, length = 100)
model.ridge.lambda <- cv.glmnet(as.matrix(select(credit.train, -Balance)), credit.train$Balance, nfolds = 10, intercept = FALSE, standardize = FALSE, lambda = grid)
model.ridge.model2 <- glmnet(as.matrix(select(credit.train, -Balance)), credit.train$Balance, alpha = 0, lambda = model.ridge.lambda$lambda.min)
model.ridge.model2.pred <- predict(model.ridge.model2,newx= as.matrix(select(credit.test, -Balance)),type="response",s=0.01)
model.ridge.model2.pred
rsquared(credit.test$Balance, model.ridge.model2.pred)
model.ridge$results
set.seed(1000)
grid <- 10 ^ seq(10, -2, length = 100)
model.ridge.lambda <- cv.glmnet(as.matrix(select(credit.train, -Balance)), credit.train$Balance, nfolds = 10, intercept = FALSE, standardize = FALSE, lambda = grid, alpha = 0)
model.ridge.model2 <- glmnet(as.matrix(select(credit.train, -Balance)), credit.train$Balance, alpha = 0, lambda = model.ridge.lambda$lambda.min)
model.ridge.model2.pred <- predict(model.ridge.model2,newx= as.matrix(select(credit.test, -Balance)),type="response",s=0.01)
rsquared(credit.test$Balance, model.ridge.model2.pred)
predict(model.ridge, credit.test$Balance)
model.ridge <- train(Balance~., data=credit.train, trControl=train_control, method="ridge")
predict(model.ridge, credit.test$Balance)
credit.test
head(credit.test)
predict(model.ridge, credit.test)
model.ridge.pred <- predict(model.ridge, credit.test)
rsquared(credit.test$Balance, model.ridge.pred)
SSE <- function(y, y_estimated) {
return(sum((y - y_estimated) ^ 2))
}
source("code/functions/evaluation.R")
rsquared(credit.test$Balance, model.ridge.pred)
rsquared(credit.test$Balance, model.ridge.model2.pred)
library(caret)
library(dplyr)
library(glmnet)
source("code/functions/evaluation.R")
# import preprocessed credit file
credit <- read.csv("data/scaled-credit.csv")
# split data set into 80% (training & validation) / 20% (testing)
set.seed(1000)
index <- createDataPartition(y = credit$Balance, p = 0.8, list = FALSE)
credit.test <- credit[-index, ]
credit.train <- credit[index, ]
# sanity check
credit.test %>% nrow()
credit.train %>% nrow()
# 10-fold cross validation
train_control<- trainControl(method="cv", number=10)
# train the model
model.ridge <- train(Balance~., data=credit.train, trControl=train_control, method="ridge")
model.ridge$results
model.ridge.pred <- predict(model.ridge, credit.test)
rsquared(credit.test$Balance, model.ridge.pred)
set.seed(1000)
grid <- 10 ^ seq(10, -2, length = 100)
model.ridge.lambda <- cv.glmnet(as.matrix(select(credit.train, -Balance)), credit.train$Balance, nfolds = 10, intercept = FALSE, standardize = FALSE, lambda = grid, alpha = 0)
model.ridge.model2 <- glmnet(as.matrix(select(credit.train, -Balance)), credit.train$Balance, alpha = 0, lambda = model.ridge.lambda$lambda.min)
model.ridge.model2.pred <- predict(model.ridge.model2,newx= as.matrix(select(credit.test, -Balance)),type="response",s=0.01)
rsquared(credit.test$Balance, model.ridge.model2.pred)
model.ridge1 <- train(Balance~., data=credit.train, trControl=train_control, method="ridge")
model.ridge1$results
model.ridge1.pred <- predict(model.ridge1, credit.test)
rsquared(credit.test$Balance, model.ridge1.pred)
set.seed(1000)
grid <- 10 ^ seq(10, -2, length = 100)
model.ridge.lambda <- cv.glmnet(as.matrix(select(credit.train, -Balance)), credit.train$Balance, nfolds = 10, intercept = FALSE, standardize = FALSE, lambda = grid, alpha = 0)
model.ridge.model2 <- glmnet(as.matrix(select(credit.train, -Balance)), credit.train$Balance, alpha = 0, lambda = model.ridge.lambda$lambda.min)
model.ridge.model2.pred <- predict(model.ridge.model2,newx= as.matrix(select(credit.test, -Balance)),type="response",s=0.01)
rsquared(credit.test$Balance, model.ridge.model2.pred)
set.seed(1000)
grid <- 10 ^ seq(10, -2, length = 100)
model.ridge2.lambda <- cv.glmnet(as.matrix(select(credit.train, -Balance)), credit.train$Balance, nfolds = 10, intercept = FALSE, standardize = FALSE, lambda = grid, alpha = 0)
model.ridge2 <- glmnet(as.matrix(select(credit.train, -Balance)), credit.train$Balance, alpha = 0, lambda = model.ridge2.lambda$lambda.min)
model.ridge.model2.pred <- predict(model.ridge2,newx= as.matrix(select(credit.test, -Balance)),type="response",s=0.01)
rsquared(credit.test$Balance, model.ridge.model2.pred)
model.ridge2.lambda
model.ridge.model2.pred <- predict(model.ridge2,newx= as.matrix(select(credit.test, -Balance)),type="response",s= model.ridge2.lambda$lambda.min)
rsquared(credit.test$Balance, model.ridge.model2.pred)
model.ridge2.pred <- predict(model.ridge2,newx= as.matrix(select(credit.test, -Balance)),type="response",s= model.ridge2.lambda$lambda.min)
rsquared(credit.test$Balance, model.ridge2.pred)
install.packages("pls")
)
library(pls)
library(pls)
library(caret)
library(dplyr)
library(pls)
source("code/functions/evaluation.R")
model.ridge1 <- train(Balance~., data=credit.train, trControl=train_control, method="pcr")
model.pcr1 <- train(Balance~., data=credit.train, trControl=train_control, method="pcr")
model.pcr1$results
model.ridge1.pred <- predict(model.pcr1, credit.test)
model.ridge1.pred <- predict(model.pcr1, credit.test)
rsquared(credit.test$Balance, model.ridge1.pred)
model.pcr1 <- train(Balance~., data=credit.train, trControl=train_control, method="pcr")
model.pcr1$results
model.pcr1.pred <- predict(model.pcr1, credit.test)
rsquared(credit.test$Balance, model.pcr1)
model.pcr1
model.pcr1.pred <- predict(model.pcr1, credit.test)
model.pcr1.pred
rsquared(credit.test$Balance, model.pcr1.pred)
mse <- function(y, y_estimate) {
result = sum((y - y_estimate) ^ 2) / length(y)
return(result)
}
?pcr()
library(caret)
library(dplyr)
library(pls)
source("code/functions/evaluation.R")
# import preprocessed credit file
credit <- read.csv("data/scaled-credit.csv")
# split data set into 80% (training & validation) / 20% (testing)
set.seed(1000)
index <- createDataPartition(y = credit$Balance, p = 0.8, list = FALSE)
credit.train <- credit[index, ]
credit.test <- credit[-index, ]
# sanity check
credit.test %>% nrow()
credit.train %>% nrow()
# 10-fold cross validation
train_control<- trainControl(method="cv", number=10)
# train the model using caret
model.pcr1 <- train(Balance~., data=credit.train, trControl=train_control, method="pcr")
model.pcr1$results
# prediction using model.ridge1
model.pcr1.pred <- predict(model.pcr1, credit.test)
rsquared(credit.test$Balance, model.pcr1.pred)
pcr(Balance ~ ., data = credit.train, validation = 'CV')
model.pcr2 <- pcr(Balance ~ ., data = credit.train, ncomp = 3, validation = 'CV')
model.pcr2
pred.pcr <- predict(model.pcr2, ncomp = 1:6, newdata= credit.test)
model.pcr2 <- pcr(Balance ~ ., data = credit.train, ncomp = 3, validation = 'CV')
model.pcr2
model.pcr2
model.pcr2.pred <- predict(model.pcr2, newdata= credit.test)
model.pcr2.pred
rsquared(credit.test$Balance, model.pcr2.pred)
model.pcr2 <- pcr(Balance ~ ., data = credit.train, validation = 'CV')
# You can use the function validationplot(), with the argument val.type = "MSEP", on the outputs of pcr() and plsr().
model.pcr2.pred <- predict(model.pcr2, newdata= credit.test)
rsquared(credit.test$Balance, model.pcr2.pred)
model.pcr2.pred <- predict(model.pcr2, newdata= credit.test)
model.pcr2.pred
model.pcr2.pred
plot(model.pcr2)
model.pcr2.pred <- predict(model.pcr2, newdata= credit.test, comps = 3)
model.pcr2.pred
model.pcr2.pred
rsquared(credit.test$Balance, model.pcr2.pred)
model.pcr2.pred <- predict(model.pcr2, newdata= credit.test, comps = 3)
model.pcr2.pred
model.pcr2.pred
model.pcr2 <- pcr(Balance ~ ., data = credit.train, validation = 'CV')
# You can use the function validationplot(), with the argument val.type = "MSEP", on the outputs of pcr() and plsr().
plot(model.pcr2)
model.pcr2.pred <- predict(model.pcr2, newdata= credit.test, comps = 3)
rsquared(credit.test$Balance, model.pcr2.pred)
?pcr
model.pcr2 <- pcr(Balance ~ ., ncomp = 3, data = credit.train, validation = 'CV')
# You can use the function validationplot(), with the argument val.type = "MSEP", on the outputs of pcr() and plsr().
plot(model.pcr2)
model.pcr2.pred <- predict(model.pcr2, newdata= credit.test, comps = 3)
rsquared(credit.test$Balance, model.pcr2.pred)
model.pcr2 <- pcr(Balance ~ ., ncomp = 3, data = credit.train, validation = 'CV', scale = FALSE)
# You can use the function validationplot(), with the argument val.type = "MSEP", on the outputs of pcr() and plsr().
plot(model.pcr2)
model.pcr2.pred <- predict(model.pcr2, newdata= credit.test, comps = 3)
rsquared(credit.test$Balance, model.pcr2.pred)
model.pcr2 <- pcr(Balance ~ ., data = credit.train, validation = 'CV', scale = FALSE)
model.pcr2$validation$PRESS
credit.train
credit.train
model.pcr2 <- pcr(Balance ~ ., data = credit.train, validation = 'CV', scale = FALSE)
model.pcr2
model.pcr2$validation$PRESS
summary(model.pcr2)
plot(model.pcr2)
plot(model.pcr2$ncomp)
plot(model.pcr2$loadings)
validationplot(model.pcr2, val.type = "MSEP")
summary(model.pcr2)
plot(summary(model.pcr2))
summary(model.pcr2)
plot(RMSEP(model.pcr2), legendpos = "topright")
plot(RMSEP(model.pcr2), legendpos = "topright")
summary(model.pcr2)
plot(RMSEP(model.pcr2), legendpos = "topright")
validationplot(model.pcr2, val.type = "MSEP")
plot(RMSEP(model.pcr2), legendpos = "topright")
plot(model.pcr2, plottype = "scores", comps = 1:3)
model.pcr2.pred <- predict(model.pcr2, ncomp = 2, newdata = credit.test)
rsquared(credit.test$Balance, model.pcr2.pred)
rsquared(credit.test$Balance, model.pcr1.pred)
model.pcr2.pred <- predict(model.pcr2, ncomp = 3, newdata = credit.test)
rsquared(credit.test$Balance, model.pcr2.pred)
model.pcr2.pred <- predict(model.pcr2, ncomp = 1, newdata = credit.test)
rsquared(credit.test$Balance, model.pcr2.pred)
model.pcr2.pred <- predict(model.pcr2, ncomp = 2, newdata = credit.test)
rsquared(credit.test$Balance, model.pcr2.pred)
model.pcr2.pred <- predict(model.pcr2, ncomp = 3, newdata = credit.test)
rsquared(credit.test$Balance, model.pcr2.pred)
model.pcr2.pred <- predict(model.pcr2, ncomp = 4, newdata = credit.test)
rsquared(credit.test$Balance, model.pcr2.pred)
model.pcr2.pred <- predict(model.pcr2, ncomp = 4, newdata = credit.test)
rsquared(credit.test$Balance, model.pcr2.pred)
model.pcr2.pred <- predict(model.pcr2, ncomp = 5, newdata = credit.test)
rsquared(credit.test$Balance, model.pcr2.pred)
model.pcr2.pred <- predict(model.pcr2, ncomp = 6, newdata = credit.test)
rsquared(credit.test$Balance, model.pcr2.pred)
model.pcr2.pred <- predict(model.pcr2, ncomp = 7, newdata = credit.test)
rsquared(credit.test$Balance, model.pcr2.pred)
model.pcr2.pred <- predict(model.pcr2, ncomp = 8, newdata = credit.test)
rsquared(credit.test$Balance, model.pcr2.pred)
model.pcr2.pred <- predict(model.pcr2, ncomp = 9, newdata = credit.test)
rsquared(credit.test$Balance, model.pcr2.pred)
model.pcr2.pred <- predict(model.pcr2, ncomp = 10, newdata = credit.test)
rsquared(credit.test$Balance, model.pcr2.pred)
model.pcr2
model.pcr2
summary(model.pcr2)
model.pcr2.pred <- predict(model.pcr2, ncomp = 8, newdata = credit.test)
rsquared(credit.test$Balance, model.pcr2.pred)
model.pcr2.pred <- predict(model.pcr2, ncomp = 11, newdata = credit.test)
rsquared(credit.test$Balance, model.pcr2.pred)
model.pcr2.pred <- predict(model.pcr2, ncomp = 9, newdata = credit.test)
rsquared(credit.test$Balance, model.pcr2.pred)
plot(model.pcr2$loadings)
plot(RMSEP(model.pcr2), legendpos = "topright")
plot(model.pcr2, plottype = "scores", comps = 1:3)
=======
library(stats)
library(car)
# Import Data
Credit <- read.csv("data/Credit.csv", header = TRUE)
Credit <- read.csv("../data/Credit.csv", header = TRUE)
Credit <- read.csv("../../data/Credit.csv", header = TRUE)
summary(Credit)
View(Credit)
Credit <- Credit[,2:12]
View(Credit)
View(Credit)
Credit$Income
quantile(Credit$Income, probs = seq(0, 1, 0.25))
min(Credit$Income)
median(Credit$Income)
hist(Credit$Income, main = "Histogram of Income", xlab = "Income")
boxplot(Credit$Income, col = "lightgray")
boxplot(Credit$Income)
boxplot(Credit$Income, col = "lightgray", main = "Boxplot of Income", xlab = "Income")
for (item in quantitative_variables) {
print(item)
}
quantitative_variables <- c("Income", "Limit", "Rating", "Cards", "")
for (item in quantitative_variables) {
print(item)
}
files <- list.files("functions/eda")
for (i in 1:length(files)) {
source(paste0("functions/eda/", files[i]))
}
files <- list.files("../functions/eda")
source(paste0("functions/eda/", files[i]))
files <- list.files("../functions/eda")
for (i in 1:length(files)) {
source(paste0("functions/eda/", files[i]))
}
files <- list.files("../functions/eda")
for (i in 1:length(files)) {
source(paste0("../functions/eda/", files[i]))
}
# Explore Quantitative Variables
quantitative_variables <- c("Income", "Limit", "Rating", "Cards", "Age", "Education", "Balance")
for (i in quantitative_variables) {
quantitative_analysis(i)
}
for (i in quantitative_variables) {
quantitative_analysis(i)
}
for (i in 1:length(files)) {
source(paste0("../functions/eda/", files[i]))
}
for (i in quantitative_variables) {
quantitative_analysis(i)
}
# Import Data
for (i in 1:length(files)) {
source(paste0("../functions/eda/", files[i]))
}
for (i in quantitative_variables) {
quantitative_analysis(i)
}
for (i in 1:length(files)) {
source(paste0("../functions/eda/", files[i]))
}
for (i in quantitative_variables) {
quantitative_analysis(i)
}
for (i in 1:length(files)) {
source(paste0("../functions/eda/", files[i]))
}
for (i in quantitative_variables) {
quantitative_analysis(i)
}
variable = time
title <- substitute(expression("Histogram of " + x), list(x = variable))
title
title <- paste("Histogram of ", variable)
title <- paste("'Histogram of ", variable, "'")
title <- paste("'Histogram of ", as.character(variable), "'")
title <- paste("'Histogram of ", deparse(expression(variable)), "'")
title
variable
variable = time
title <- paste("'Histogram of ", deparse(expression(variable)), "'")
title
variable <- Income
variable <- "Income"
Credit$variable
library(shiny)
setwd("~/Desktop")
shiny::runApp('stat159-2016fall-lab3/lab8')
setwd("~/Desktop/stat159-2016fall-lab3/lab8")
shiny::runApp()
shiny::runApp()
Advertising <- read.csv("Advertising.csv")
Advertising <- Advertising[,2:5]
View(Advertising)
View(Advertising)
names(Advertising)
names(Advertising)[1:3]
shiny::runApp()
Advertising[, c(TV, sales)]
Advertising[, c("sales")]
Advertising[, "sales"]
Advertising[, sales]
Advertising[, Sales]
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
plot(Advertising$TV, Advertising$Sales)
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
setwd("~/Desktop")
bodyfat <- read.table("bodyfat.txt")
View(bodyfat)
bodyfat <- read.table("bodyfat.txt", header = TRUE)
View(bodyfat)
lm <- lm(BODYFAT ~ AGE + WEIGHT + HEIGHT + THIGH)
lm <- lm(BODYFAT ~ AGE + WEIGHT + HEIGHT + THIGH, data = bodyfat)
summary(lm)
plot(lm$fitted.values, lm$residuals)
plot(lm$fitted.values, lm$residuals, xlab = "Fitted Values", ylab = "Residuals", main = "Residuals against fitted values")
plot(lm$fitted.values, rstandard(lm), xlab = "Fitted Values", ylab = "Standardized Residuals", main = "Standardized residuals against fitted values")
plot(lm$fitted.values, lm$residuals, xlab = "Fitted Values", ylab = "Residuals", main = "Residuals against fitted values")
plot(lm$fitted.values, rstandard(lm), xlab = "Fitted Values", ylab = "Standardized Residuals", main = "Standardized residuals against fitted values")
plot(rstandard(lm), lm$residuals, xlab = "Standardized Residuals", ylab = " Residuals", main = "Residuals against Standardized Residuals")
p_r <- bodyfat$BODYFAT - lm$fitted.values
lm$residuals - p_r
bodyfat <- read.table("bodyfat.txt", header = TRUE)
lm <- lm(BODYFAT ~ AGE + WEIGHT + HEIGHT + THIGH, data = bodyfat)
leverage <- influence(lm)$hat
predicted_residuals <- lm$residuals / (1 - leverage)
plot(lm$fitted.values, lm$residuals, xlab = "Fitted Values", ylab = "Residuals", main = "Residuals against fitted values")
plot(lm$fitted.values, rstandard(lm), xlab = "Fitted Values", ylab = "Standardized Residuals", main = "Standardized residuals against fitted values")
plot(rstandard(lm), lm$residuals, xlab = "Standardized Residuals", ylab = " Residuals", main = "Residuals against Standardized Residuals")
plot(lm$fitted.values, predicted_residuals, xlab = "Fitted Values", ylab = "Predicted Residuals", main = "Predicted residuals against fitted values")
plot(predicted_residuals, lm$residuals, xlab = "Predicted Residuals", ylab = " Residuals", main = "Residuals against Predicted Residuals")
plot(leverage, lm$residuals, xlab = "Leverage", ylab = " Residuals", main = "Residuals against Leverage")
plot(rstudent(lm), predicted_residuals, xlab = "Standardized Predicted Residuals", ylab = "Predicted Residuals", main = "Predicted residuals against Standardized Predicted Residuals")
plot(rstudent(lm), rstandard(lm), xlab = "Standardized Predicted Residuals", ylab = "Standardized Residuals", main = "Standardized residuals against Standardized Predicted Residuals")
plot(1:nrow(bodyfat), cooks.distance(lm), xlab = "ID number of subjects", ylab = "Cooks Distance", main = "ooks Distance against the ID number of the subjects")
lm$coefficients
lm$coefficients[-1, 1]
lm$coefficients
lm$coefficients[1]
rep(0, 10)
install.packages("faraway")
library(faraway)
setwd("~/Desktop")
load("twoyear.Rdata")
View(data)
twoyear = data[, c('lwage','jc','univ','exper')]
View(twoyear)
View(data)
View(desc)
lm = lm(lwage ~ jc + I(jc + univ) + exper, data = twoyear)
summary(lm)$coefficients[2,4]
summary(lm)$coefficients
lm = lm(lwage ~ I(jc + univ) + jc + exper, data = twoyear)
summary(lm)$coefficients[3,4]
lm = lm(lwage ~ I(jc + univ) + univ + exper, data = twoyear)
summary(lm)$coefficients[3,4]
summary(lm)
M = lm(lwage ~ jc + univ + exper, data = twoyear)
m = lm(lwage ~ I(jc + univ) + exper, data = twoyear)
anova(m, M)
anova_r = anova(m, M)
anova_r$F
anova_r$`Pr(>F)`
anova_r$`Pr(>F)`
sumary(lm)
lm = lm(lwage ~ I(jc + univ) + univ + exper, data = twoyear)
summary(lm)[3, 3]
summary(lm)
summary(lm)[3]
result = summary(lm)
result$coefficients
summary(lm)$coefficients[3, 3]
lm = lm(lwage ~ jc + I(jc + univ) + exper, data = twoyear)
t_stat = summary(lm)$coefficients[2, 3]
t_stat
summary(lm)$coefficients[2,4]
B = 1000
t_stat_new = rep(0, B)
for (i in 1 : B) {
t_stat_new[i] = summary(lm(lwage ~ sample(jc) + I(jc + univ) + exper,
data = twoyear))$coefficients[2,3]
}
count = sum(abs(t_stat_new) >= abs(t_stat))
p_value = count / B
lm <- lm(BODYFAT ~ AGE + WEIGHT + HEIGHT + THIGH, data = bodyfat)
plot(lm$fitted.values, lm$residuals, xlab = "Fitted Values", ylab = "Residuals", main = "Residuals against fitted values")
which(lm$fitted.values > 35)
which(lm$residuals > 14)
which(lm$residuals > 15)
which(lm$residuals > 16)
plot(lm$fitted.values, rstandard(lm), xlab = "Fitted Values", ylab = "Standardized Residuals", main = "Standardized residuals against fitted values")
lm1 = lm(BODYFAT~ AGE + WEIGHT + HEIGHT + THIGH, data = bodyfat)
standardized_res = rstandard(lm1)
p1 = qplot(lm1$fitted.values, lm1$residuals,
xlab = 'Fitted Values', ylab = 'Residuals')
library(ggplot2)
p1 = qplot(lm1$fitted.values, lm1$residuals,
xlab = 'Fitted Values', ylab = 'Residuals')
pq
p1
p2 = qplot(lm1$fitted.values, standardized_res,
xlab = 'Fitted Values', ylab = 'Standardized Residuals')
p2
plot(rstandard(lm), lm$residuals, xlab = "Standardized Residuals", ylab = " Residuals", main = "Residuals against Standardized Residuals")
which(rstandard(lm) < -3.9)
leverage <- influence(lm)$hat
leverage
plot(1:nrow(bodyfat), leverage)
predicted_residuals <- lm$residuals / (1 - leverage)
plot(lm$fitted.values, predicted_residuals, xlab = "Fitted Values", ylab = "Predicted Residuals", main = "Predicted residuals against fitted values")
which(predicted_residuals > 19)
which(predicted_residuals > 15)
plot(predicted_residuals, lm$residuals, xlab = "Predicted Residuals", ylab = " Residuals", main = "Residuals against Predicted Residuals")
which(predicted_residuals < -30)
plot(leverage, lm$residuals, xlab = "Leverage", ylab = " Residuals", main = "Residuals against Leverage")
which(leverage > 0.1)
plot(rstudent(lm), predicted_residuals, xlab = "Standardized Predicted Residuals", ylab = "Predicted Residuals", main = "Predicted residuals against Standardized Predicted Residuals")
which(rstudent(lm) < -3.9)
plot(rstudent(lm), rstandard(lm), xlab = "Standardized Predicted Residuals", ylab = "Standardized Residuals", main = "Standardized residuals against Standardized Predicted Residuals")
plot(1:nrow(bodyfat), cooks.distance(lm), xlab = "ID number of subjects", ylab = "Cooks Distance", main = "Cooks Distance against the ID number of the subjects")
which(cooks.distance(lm) > 0.3)
pt()
nrow(bodyfat)
new <- bodyfat[-1, 0]
nrow(new)
head(body)
head(bodyfat)
head(new)
new = bodyfat[-1,]
head(new)
new_model = lm(BODYFAT ~ AGE + WEIGHT + HEIGHT + THIGH,
data = new)
summary(new_model)
rstandard(new_model)
rstandard(lm)
df = 252 - 4 - 12 = 235
df = 252 - 4 - 12
p_value = sapply(rstudent(lm), function(a) 1 - pt(a, df))
plot(1:nrow(bodyfat), p_value)
sum(p_value < 0.05)
setwd("~/Desktop/stat159-2016fall-lab3/lab9")
setwd("~/Desktop/stat159-2016fall-lab3/lab9")
Credit <- read.csv("data/Credit.csv", header = TRUE)
setwd("~/Desktop/stat159-fall2016-project2/code/scripts")
Credit <- read.csv("data/Credit.csv", header = TRUE)
files <- list.files("functions/eda")
for (i in 1:length(files)) {
source(paste0("functions/eda/", files[i]))
}
# Explore Quantitative Variables
quantitative_variables <- c("Income", "Limit", "Rating", "Cards", "Age", "Education", "Balance")
for (i in quantitative_variables) {
quantitative_analysis(i)
}
library("dplyr", lib.loc="/Library/Frameworks/R.framework/Versions/3.2/Resources/library")
quantitative_analysis <- function(variable) {
# Select data
data <- select(Credit, variable)
# Minimum, Maximum, Range
min(data)
max(data)
range(data)
# Median, First and Third quartiles, and interquartile range (IQR)
median(data)
quantile(data, probs = seq(0, 1, 0.25))
IQR(data)
# Mean and Standard Deviation
mean(data)
sd(data)
# Histograms and boxplots
png(paste("images/histogram-", variable, ".png"))
title <- substitute(expression("Histogram of " + x), list(x = variable))
xlab <- substitute(expression("'" + x + "'"), list(x = variable))
hist(data, main = title, xlab = xlab)
dev.off()
png(paste("images/boxplot-", variable, ".png"))
title <- substitute(expression("Boxplot of " + x), list(x = variable))
xlab <- substitute(expression(x), list(x = variable))
boxplot(data, col = "lightgray", main = title, xlab = xlab)
dev.off()
}
quantitative_analysis("Income")
select(Credit, Income)
select(Credit, "Income")
Credit$Income
select(Credit, Income)
names(Credit)
Credit <- read.csv("data/Credit.csv", header = TRUE)
Credit <- Credit[,2:12]
library(stats)
library(car)
# Import Data
Credit <- read.csv("data/Credit.csv", header = TRUE)
Credit <- Credit[,2:12]
Credit <- read.csv("data/Credit.csv", header = TRUE)
head(Credit)
setwd("~/Desktop/stat159-fall2016-project2")
Credit <- read.csv("data/Credit.csv", header = TRUE)
Credit <- Credit[,2:12]
variable <- 'Income'
col <- match(names(Credit), variable)
col
data <- select(Credit, col)
names(Credit)
col <- match(names(Credit), variable)[1]
col
data <- select(Credit, col)
data
variable = 'Limit'
col <- match(names(Credit), variable)[1]
# Select data
data <- select(Credit, col)
head(data)
data
variable = 'Limit'
col <- match(names(Credit), variable)[1]
col
col <- match(names(Credit), variable)
col
names(Credit) == variable
index(names(Credit) == variable)
which(names(Credit) == variable)
variable = 'Limit'
col <- which(names(Credit) == variable)
# Select data
data <- select(Credit, col)
head(data)
cat(c("Summary Statistics of", quant_var, "\n")
)
quant_var <- 1
cat(c("Summary Statistics of", quant_var, "\n"))
var <- cat(c("Summary Statistics of", quant_var, "\n"))
var
Credit <- read.csv("data/Credit.csv", header = TRUE)
Credit <- Credit[,2:12]
View(Credit)
table(Credit$Gender)
prop.table(Credit$Gender)
prop.table(Credit$Gender, 1)
prop.table(Credit$Gender, 2)
ftable(Credit$Gender)
table(Credit$Gender)
table(Credit$Gender) / nrow(Credit)
barplot(Credit$Gender)
barplot(Credit$Gender)
barplot(table(Credit$Gender), ylim = c(0, nrow(Credit)),
main = "table")
)
barplot(table(Credit$Gender), ylim = c(0, nrow(Credit)),
main = "table")
barplot(table(Credit$Gender), ylim = c(0, nrow(Credit)), main = "table")
barplot(table(Credit$Gender), ylim = c(0, nrow(Credit)), main = "table")
barplot(table(Credit$Gender))
variable <- "Gender"
col <- match(names(Credit), variable)[1]
data <- select(Credit, col)
head(data)
col
col <- match(names(Credit), variable)
col
col <- which(names(Credit), variable)
col <- which(names(Credit) == variable)
col
data <- select(Credit, col)
head(data)
table(data)
table(data) / nrow(Credit)
barplot(table(data), main = paste("Barplot of Frequency Table - ", variable))
barplot(c(3,4))
barplot(table(data), main = paste("Barplot of Frequency Table - ", variable))
yy <- 	barplot(table(data), main = paste("Barplot of Frequency Table - ", variable))
View(yy)
yy <- barplot(c(3,4))
yy
counts <- table(Credit$Gender)
barplot(counts)
mtcars
counts <- table(mtcars$gear)
barplot(counts, main="Car Distribution",
xlab="Number of Gears")
variable <- "Income"
col <- which(names(Credit) == variable)
# Select data
data <- select(Credit, col)
head(data)
min(data)
max(data)
range(data)
# Median, First and Third quartiles, and interquartile range (IQR)
median(data)
head(data)
View(data)
median(data, na.rm = TRUE)
median(data, na.rm = FALSE)
summary(data)
IQR(data)
type(data)
s <- summary(data)
typeof(s)
typeof(data)
unlist(data)
variable <- "Income"
col <- which(names(Credit) == variable)
# Select data
data <- select(Credit, col)
# Unlist data
data <- unlist(data)
# Minimum, Maximum, Range
min(data)
max(data)
range(data)
# Median, First and Third quartiles, and interquartile range (IQR)
median(data, na.rm = TRUE)
quantile(data, probs = seq(0, 1, 0.25))
IQR(data)
# Mean and Standard Deviation
mean(data)
sd(data)
paste0("../../images/histogram-", variable, ".png")
paste0("../../images/histogram-", variable, ".png")
View(Credit)
library(graphics)
barplot(data, main = paste("Barplot of Frequency Table - ", variable), xlab = variable)
barplot(c(3,4))
print(barplot(c(3, 4)))
counts <- table(mtcars$gear)
counts
barplot(counts, main="Car Distribution",
xlab="Number of Gears")
>>>>>>> 87ba2a4dbfc6a83f4c3996c5cecbd0cfde250663
